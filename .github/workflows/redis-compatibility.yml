name: Redis 7.x Multi-Version Compatibility

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  redis-multi-version:
    name: Redis ${{ matrix.redis-version }} Compatibility
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        redis-version: ['7.0.15', '7.2.4', '7.4.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Create temporary data directory
      id: tmpdir
      run: |
        TMPDIR=$(mktemp -d)
        echo "tmpdir=$TMPDIR" >> $GITHUB_OUTPUT
        echo "Created temporary directory: $TMPDIR"

    - name: Start Redis ${{ matrix.redis-version }}
      id: redis
      run: |
        # Stop any existing Redis processes
        docker stop redis-test || true
        docker rm redis-test || true
        
        # Start Redis with specific version and data directory
        docker run -d \
          --name redis-test \
          -p 6379:6379 \
          -v ${{ steps.tmpdir.outputs.tmpdir }}:/data \
          redis:${{ matrix.redis-version }}-alpine \
          redis-server --save 60 1 --dir /data --appendonly yes
        
        echo "Started Redis ${{ matrix.redis-version }}"
        
        # Wait for Redis to be ready
        echo "Waiting for Redis to be ready..."
        for i in {1..60}; do
          if docker exec redis-test redis-cli ping 2>/dev/null | grep -q PONG; then
            echo "Redis is ready!"
            break
          fi
          echo "Attempt $i/60: waiting for Redis..."
          sleep 2
        done
        
        # Verify Redis version
        ACTUAL_VERSION=$(docker exec redis-test redis-cli INFO SERVER | grep redis_version | cut -d: -f2 | tr -d '\r')
        echo "actual_version=$ACTUAL_VERSION" >> $GITHUB_OUTPUT
        echo "Redis version: $ACTUAL_VERSION"
        
        # Fail if version doesn't match expected
        if [[ "$ACTUAL_VERSION" != "${{ matrix.redis-version }}"* ]]; then
          echo "ERROR: Expected Redis ${{ matrix.redis-version }}, but got $ACTUAL_VERSION"
          exit 1
        fi

    - name: Install redis-tools
      run: sudo apt-get update && sudo apt-get install -y redis-tools

    - name: Final Redis verification
      run: |
        # Final check that Redis is responding correctly
        if ! redis-cli ping 2>/dev/null | grep -q PONG; then
          echo "Redis failed to start properly"
          docker logs redis-test
          exit 1
        fi
        
        # Log Redis info for debugging
        echo "Redis INFO:"
        redis-cli INFO SERVER | grep -E "(redis_version|arch_bits|multiplexing_api|gcc_version)"

    - name: Run Redis 7.x Compatibility Tests
      run: |
        echo "Testing Redis ${{ matrix.redis-version }} compatibility..."
        go test -v -run TestEndToEndWithRealRedis -timeout 120s
      env:
        REDIS_ADDR: localhost:6379
        REDIS_VERSION: ${{ matrix.redis-version }}

    - name: Run RDB Parsing Tests for Redis 7.x
      run: |
        echo "Testing RDB parsing with Redis ${{ matrix.redis-version }}..."
        go test -v -run TestRDBParsingRobustness -timeout 90s
      env:
        REDIS_ADDR: localhost:6379
        REDIS_VERSION: ${{ matrix.redis-version }}

    - name: Run Full Sync + Incremental Tests
      run: |
        echo "Testing full sync + incremental replication with Redis ${{ matrix.redis-version }}..."
        go test -v -run TestFullSyncAndIncremental -timeout 90s
      env:
        REDIS_ADDR: localhost:6379
        REDIS_VERSION: ${{ matrix.redis-version }}

    - name: Test Redis 7.x Special Features
      run: |
        echo "Testing Redis 7.x specific features..."
        go test -v -run TestRedis7xFeatures -timeout 60s
      env:
        REDIS_ADDR: localhost:6379
        REDIS_VERSION: ${{ matrix.redis-version }}

    - name: Cleanup Redis container
      if: always()
      run: |
        echo "Cleaning up Redis container..."
        # Only cleanup if we're in CI environment to avoid local development issues
        if [ "${GITHUB_ACTIONS}" = "true" ]; then
          docker stop redis-test 2>/dev/null || true
          docker rm redis-test 2>/dev/null || true
          
          # Clean up temporary directory
          if [ -n "${{ steps.tmpdir.outputs.tmpdir }}" ] && [ -d "${{ steps.tmpdir.outputs.tmpdir }}" ]; then
            rm -rf "${{ steps.tmpdir.outputs.tmpdir }}" 2>/dev/null || true
            echo "Cleaned up temporary directory"
          fi
        else
          echo "Skipping cleanup in non-CI environment"
        fi

  # Test with authentication
  redis-multi-version-auth:
    name: Redis ${{ matrix.redis-version }} with Auth
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        redis-version: ['7.0.15', '7.2.4', '7.4.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.5'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Create temporary data directory
      id: tmpdir
      run: |
        TMPDIR=$(mktemp -d)
        echo "tmpdir=$TMPDIR" >> $GITHUB_OUTPUT
        echo "Created temporary directory: $TMPDIR"

    - name: Start Redis ${{ matrix.redis-version }} with Auth
      run: |
        # Stop any existing Redis processes
        docker stop redis-auth-test || true
        docker rm redis-auth-test || true
        
        # Start Redis with authentication
        docker run -d \
          --name redis-auth-test \
          -p 6379:6379 \
          -v ${{ steps.tmpdir.outputs.tmpdir }}:/data \
          redis:${{ matrix.redis-version }}-alpine \
          redis-server --requirepass testpassword123 --save 60 1 --dir /data
        
        echo "Started Redis ${{ matrix.redis-version }} with authentication"
        
        # Wait for Redis to be ready
        echo "Waiting for Redis with auth to be ready..."
        for i in {1..30}; do
          if docker exec redis-auth-test redis-cli -a testpassword123 --no-auth-warning ping 2>/dev/null | grep -q PONG; then
            echo "Redis with auth is ready!"
            break
          fi
          echo "Attempt $i/30: waiting for Redis with auth..."
          sleep 2
        done

    - name: Install redis-tools
      run: sudo apt-get update && sudo apt-get install -y redis-tools

    - name: Verify Redis auth
      run: |
        # Final verification that Redis with auth is working
        if ! redis-cli -a testpassword123 --no-auth-warning ping 2>/dev/null | grep -q PONG; then
          echo "Redis with auth failed to start properly"
          docker logs redis-auth-test
          exit 1
        fi
        echo "Redis with auth verified!"

    - name: Run Authentication Tests
      run: |
        echo "Testing authentication with Redis ${{ matrix.redis-version }}..."
        go test -v -run TestEndToEndWithRealRedis -timeout 120s
      env:
        REDIS_ADDR: localhost:6379
        REDIS_PASSWORD: testpassword123
        REDIS_FAKE_P: testpassword123
        REDIS_VERSION: ${{ matrix.redis-version }}

    - name: Cleanup Redis container
      if: always()
      run: |
        echo "Cleaning up Redis auth container..."
        # Only cleanup if we're in CI environment to avoid local development issues
        if [ "${GITHUB_ACTIONS}" = "true" ]; then
          docker stop redis-auth-test 2>/dev/null || true
          docker rm redis-auth-test 2>/dev/null || true
          
          # Clean up temporary directory
          if [ -n "${{ steps.tmpdir.outputs.tmpdir }}" ] && [ -d "${{ steps.tmpdir.outputs.tmpdir }}" ]; then
            rm -rf "${{ steps.tmpdir.outputs.tmpdir }}" 2>/dev/null || true
            echo "Cleaned up temporary directory"
          fi
        else
          echo "Skipping cleanup in non-CI environment"
        fi

  # Summary job to check all versions passed
  redis-compatibility-summary:
    name: Redis 7.x Compatibility Summary
    runs-on: ubuntu-latest
    needs: [redis-multi-version, redis-multi-version-auth]
    if: always()
    
    steps:
    - name: Check compatibility results
      run: |
        echo "Redis 7.x Compatibility Test Results:"
        echo "======================================"
        
        if [[ "${{ needs.redis-multi-version.result }}" == "success" ]]; then
          echo "‚úÖ Multi-version tests: PASSED"
        else
          echo "‚ùå Multi-version tests: FAILED"
        fi
        
        if [[ "${{ needs.redis-multi-version-auth.result }}" == "success" ]]; then
          echo "‚úÖ Authentication tests: PASSED"
        else
          echo "‚ùå Authentication tests: FAILED"
        fi
        
        # Fail if any jobs failed
        if [[ "${{ needs.redis-multi-version.result }}" != "success" ]] || [[ "${{ needs.redis-multi-version-auth.result }}" != "success" ]]; then
          echo ""
          echo "Some Redis 7.x compatibility tests failed."
          exit 1
        fi
        
        echo ""
        echo "üéâ All Redis 7.x compatibility tests passed!"